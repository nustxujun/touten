file ::= {  (varlist | [global] function) [';'] }//变量恒为全局


def ::=  ( varlist | function  )


varlist = name [ '=' exp] { ',' name ['=' exp] }


function ::= 'function' name funcbody

block ::= {stat [ ';' ]}


stat ::=  loop | cond | (shared | local) def | assgin | funcall | return


return ::= 'return' exp{',' exp}


funcbody ::= [ '(' parlist ')'] '{' block'}'


parlist ::= var { ',' var} ['...'] //... 不定参数符号,目前只支持函数参数传递时使用，以后如果做变量使用，需要修改解析结构


funcall ::=  var ( '(' [args] ')'   

variadic = '...'

args ::= exp{',' exp} [ ',' variadic]

assgin ::= var ['&']'=' exp |

		'[' var { ',' var } ']' '=' exp
		

constance = null | false | true |

			number | string 
			
	 
exp ::= constance |

		accessSymbol |

		fieldbody | funcbody |

		exp binop exp | unop exp |  

		'(' exp ')' 

loop ::= while '(' exp ')' '{' block '}' |

	 do '{' block '}' while '(' exp ')'


cond ::= if '(' exp ')' (exp | '{' block '}') {elseif '(' exp ')' (exp | '{' block '}')} [else (exp | '{' block '}')]


var ::= ['$' | '@'] name  {('[' exp ']')  | ('.' string }    ///a.b 作为 a['b']的语法糖存在，动态语言似乎很难实现真正的成员


accessSymbol ::=  var | funcall  //单独为exp文法考虑的